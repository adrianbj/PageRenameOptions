<?php

/**
 * ProcessWire module for determining how pages are renamed when the title is changed
 * by Adrian Jones
 *
 * Determine how pages are renamed when the title is changed
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageRenameOptions extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title' => 'Page Rename Options',
            'summary' => 'Determine how pages are renamed when the title is changed',
            'href' => '',
            'version' => 13,
            'permanent' => false,
            'autoload' => true,
            'icon'     => 'pencil-square-o'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "exemptRoles" => array(),
                "initialDifference" => "",
                "preventManualChanges" => "",
                "liveChanges" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


    public function init() {
        $this->addHookAfter("ProcessPageEdit::buildForm", $this, "addScripts");
    }

    public function addScripts($event){
        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];

        if(!$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))){
            //ProcessPageEdit check is to prevent disabling of name field when editing a user etc
            if($this->process == "ProcessPageEdit" && $this->data['preventManualChanges']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "PreventManualChanges.js?v={$version}");
            if($this->data['initialDifference']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "InitialDifferenceProtected.js?v={$version}");
        }

        wire("config")->scripts->add($this->config->urls->PageRenameOptions . "PageRenameOptions.js?v={$version}");

        if(!$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))){
            if($this->data['liveChanges']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "LiveChangesProtected.js?v={$version}");
        }
    }



    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'warning');
        $f->label = __('WARNING');
        $f->value = "<h3>This module may break links to your site because changes to the page's name also change its URL!</h3>";
        if(wire('modules')->isInstalled("PagePathHistory")){
            $f->value .= "<h3 style='color:#009900'>Page Path History is installed, so you are protected from any future URL changes.</h3>";
        }
        else{
            $f->value .= "<h3 style='color:#FF6600'>You should install <a href='".wire('config')->urls->admin."module/installConfirm?name=PagePathHistory'>Page Path History</a> (core module) to ensure any changed URLs are automatically redirected.</h3>";
        }
        if(wire('modules')->isInstalled("PageLinkAbstractor")){
            $f->value .= "<h3 style='color:#009900'>Page Link Abstractor is installed, so links embedded in Textarea fields will be updated automatically.</h3>";
        }
        else{
            $f->value .= "<h3 style='color:#FF6600'>You might consider installing <a href='http://modules.processwire.com/modules/page-link-abstractor/'>Page Link Abstractor</a> to ensure any links embedded in Textarea fields are automatically updated if the page name/url changes.</h3>";
        }
        $f->value .= "<br /><p><strong>Introduction</strong></p><p>With none of the settings below checked, the default behavior is to have the page name always match changes to the page title, but allow the user to manually edit if they want. The options allow you to protect initial differences (changes you may have made as a user with an exempt role), completely disable manual changes, or protect manual name changes from subsequent changes to the title while editing.</p>
        <p>My preferred settings are to set the exempt role as superuser, and check \"Initial Differences Protected\" and \"Prevent Manual Changes\".</p>";

        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name+id', 'exemptRoles');
        $f->label = __('Exempt Roles');
        $f->description = __("The selected roles will not be subject to any of the rules below.\nThe name will change automatically with the title, but they will be able to manually edit the page name as desired.");
        $f->setAsmSelectOption('sortable', false);
        // populate with all available templates
        foreach(wire('roles') as $r) $f->addOption($r->name);
        if(isset($data['exemptRoles'])) $f->value = $data['exemptRoles'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'initialDifference');
        $f->label = __('Initial Differences Protected');
        $f->columnWidth = 33;
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name is already different from the title (evaluated on page edit initial load).');
        $f->attr('checked', $data['initialDifference'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'preventManualChanges');
        $f->label = __('Prevent Manual Changes');
        $f->columnWidth = 34;
        $f->description = __('If checked, it won\'t be possible to manually edit the name.');
        $f->notes = __('If checked, this will disable the "Live Changes Protected" setting since it won\'t be possible to make any manual changes.');
        $f->attr('checked', $data['preventManualChanges'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'liveChanges');
        $f->label = __('Live Changes Protected');
        $f->showIf = "preventManualChanges!=1";
        $f->columnWidth = 33;
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name field was manually changed at any time during the current page edit.');
        $f->attr('checked', $data['liveChanges'] ? 'checked' : '' );
        $wrapper->add($f);

        return $wrapper;
    }

}