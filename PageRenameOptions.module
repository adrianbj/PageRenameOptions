<?php

/**
 * ProcessWire module for determining how pages are renamed when the title is changed
 * by Adrian Jones
 *
 * Determine how pages are renamed when the title is changed
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageRenameOptions extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title' => 'Page Rename Options',
            'summary' => 'Determine how pages are renamed when the title is changed',
            'href' => '',
            'version' => 10,
            'permanent' => false,
            'autoload' => true,
            'icon'     => 'pencil-square-o'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "forceMatch" => "",
                "exemptRoles" => array(),
                "initialDifference" => "",
                "liveChanges" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


    public function init() {
        $this->addHookAfter("ProcessPageEdit::buildForm", $this, "addScripts");
    }

    public function addScripts($event){
        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];

        //ProcessPageEdit check is to prevent disabling of name field when editing a user etc
        if($this->process == "ProcessPageEdit" && $this->data['forceMatch'] && !$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "ForceMatch.js?v={$version}");
        if($this->data['initialDifference']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "InitialDifferenceProtected.js?v={$version}");
        wire("config")->scripts->add($this->config->urls->PageRenameOptions . "PageRenameOptions.js?v={$version}");
        if($this->data['liveChanges']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "LiveChangesProtected.js?v={$version}");
    }



    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'warning');
        $f->label = __('WARNING');
        $f->value = "<h3>This module may break links to your site because changes to the page's name also change its URL!</h3>";
        if(wire('modules')->isInstalled("PagePathHistory")){
            $f->value .= "<h3 style='color:#009900'>Page Path History is installed, so you are protected from any future URL changes.</h3>";
        }
        else{
            $f->value .= "<h3 style='color:#FF6600'>You should install Page Path History (core module) to ensure any changed URLs are automatically redirected.</h3>";
        }
        if(wire('modules')->isInstalled("PageLinkAbstractor")){
            $f->value .= "<h3 style='color:#009900'>Page Link Abstractor is installed, so links embedded in Textarea fields will be updated automatically.</h3>";
        }
        else{
            $f->value .= "<h3 style='color:#FF6600'>You might consider installing <a href='http://modules.processwire.com/modules/page-link-abstractor/'>Page Link Abstractor</a> to ensure any links embedded in Textarea fields are automatically updated if the page name/url changes.</h3>";
        }

        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'forceMatch');
        $f->label = __('Force Match');
        $f->columnWidth = 50;
        $f->description = __('If checked, the name will always match the title and it will not be possible to manually edit the name.');
        $f->notes = __("If checked, this will override the settings below, except for roles that are set exempt from this rule.");
        $f->attr('checked', $data['forceMatch'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name+id', 'exemptRoles');
        $f->label = __('Force Match Exempt Roles');
        $f->columnWidth = 50;
        $f->description = __("The selected roles will not be subject to the force match rule. They will be able to manually edit the page name, based on the selected options below.");
        $f->setAsmSelectOption('sortable', false);

        // populate with all available templates
        foreach(wire('roles') as $r) $f->addOption($r->name);
        if(isset($data['exemptRoles'])) $f->value = $data['exemptRoles'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'initialDifference');
        $f->label = __('Initial Differences Protected');
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name is already different from the title (evaluated on page edit initial load).');
        $f->attr('checked', $data['initialDifference'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'liveChanges');
        $f->label = __('Live Changes Protected');
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name field was manually changed at any time during the current page edit.');
        $f->attr('checked', $data['liveChanges'] ? 'checked' : '' );
        $wrapper->add($f);

        return $wrapper;
    }

}