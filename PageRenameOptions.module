<?php

/**
 * ProcessWire module for determining how pages are renamed when the title is changed
 * by Adrian Jones
 *
 * Determine how pages are renamed when the title is changed
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PageRenameOptions extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title' => 'Page Rename Options',
            'author' => 'Adrian Jones',
            'summary' => 'Determine how pages are renamed when the title is changed',
            'href' => 'http://modules.processwire.com/modules/page-rename-options/',
            'version' => 32,
            'permanent' => false,
            'autoload' => 'template=admin',
            'icon'     => 'pencil-square-o'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "renameMatchTitle" => 1,
                "renameUnpublishedOnly" => null,
                "exemptRoles" => array(),
                "includeExclude" => 'exclude',
                "exemptPages" => array(),
                "exemptTemplates" => array(),
                "initialDifference" => "",
                "preventManualChanges" => "",
                "liveChanges" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


    public function init() {
        //escape if not PageEdit or PageAdd
        if(wire('page')->process != 'ProcessPageEdit' && wire('page')->process != 'ProcessPageAdd') return;

        $this->addHookAfter("ProcessPageEdit::buildForm", $this, "addScripts");
        $this->addHookAfter("ProcessPageAdd::buildForm", $this, "addScripts");
    }

    public function addScripts($event){

        $p = $event->object->getPage();

        //escape if homepage
        if($p->id == 1) return;

        // rename historically named exempt to the more meaningful specified
        $specifiedPages = $this->data['exemptPages'];
        $specifiedTemplates = $this->data['exemptTemplates'];

        // only run these checks if page has a template already. This also covers it having a valid ID (ie not 0)
        // this prevents this working when adding a new page, but works fine for editing/renaming an existing page
        if($p->template) {
            if($this->data['includeExclude'] == 'include') {
                //escape if page is not specified
                if(count($specifiedPages) !== 0 && !in_array($p->id, $specifiedPages)) return;

                //escape if template is specified
                if(count($specifiedTemplates) !== 0 && !in_array($p->template->id, $specifiedTemplates)) return;
            }
            else {
                //escape if page is specified
                if(count($specifiedPages) !== 0 && in_array($p->id, $specifiedPages)) return;

                //escape if template is not specified
                if(count($specifiedTemplates) !== 0 && in_array($p->template->id, $specifiedTemplates)) return;
            }
        }

        // $p->id check is because it is not available for ProcessPageAdd
        if($p->id && $p->template->flags & Template::flagSystem) return; // exclude system templates eg. users etc

        // if settings tab is disabled and name is not in content tab, then we need to rename on save
        if($p->id && $p->template->noSettings && !$p->template->nameContentTab) {
            if(!$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))){
                // if initial difference protected enabled, exit if initial name and name-ified title are different
                if($this->data['initialDifference'] && $p->name != $this->wire('sanitizer')->pageName($p->title, Sanitizer::translate)) return;
            }
            $this->addHookAfter('Pages::saveReady', $this, 'renameOnSave');
        }
        // javascript control of name in real time because name field is available
        else {
            $conf = $this->getModuleInfo();
            $version = (int) $conf['version'];

            if(!$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))){
                //ProcessPageEdit/Add check is to prevent disabling of name field when editing a user etc
                if(($this->process == "ProcessPageEdit" || $this->process == "ProcessPageAdd") && $this->data['preventManualChanges']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "PreventManualChanges.js?v={$version}");
                if($this->data['initialDifference']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "InitialDifferenceProtected.js?v={$version}");
            }

            if($this->data['renameMatchTitle']) {
                if(!$p->is(Page::statusUnpublished) && $this->data['renameUnpublishedOnly'] == 1) return;
                wire("config")->scripts->add($this->config->urls->PageRenameOptions . "PageRenameOptions.js?v={$version}");
            }

            if(!$this->user->roles->has("name=".implode("|",$this->data['exemptRoles']))){
                if($this->data['liveChanges']) wire("config")->scripts->add($this->config->urls->PageRenameOptions . "LiveChangesProtected.js?v={$version}");
            }
        }
    }


    public function renameOnSave(HookEvent $event) {

        $p = $event->arguments[0];

        $n = 0;
        $newName = $this->wire('sanitizer')->pageName($p->title, Sanitizer::translate);
        $existingPages = $p->parent->children("name=$newName, include=all");
        $existingPageIds = array();
        foreach($existingPages as $existingPage) $existingPageIds[] = $existingPage->id;
        if(!in_array($p->id, $existingPageIds)) { // this prevents "-1" being appended when saving page with same title as before
            do {
                $name = $newName . ($n ? "-$n" : '');
                $child = $p->parent->child("name=$name, include=all"); // see if another page already has the same name
                $n++;
            } while($child->id);
            $p->name = $name;
        }

        $event->return = $p;
    }



    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get("InputfieldMarkup");
        $f->attr('name', 'warning');
        $f->label = __('WARNING');
        $f->value = "<h3>This module may break links to your site because changes to the page's name also change its URL!</h3>";
        if(wire('modules')->isInstalled("PagePathHistory")){
            $f->value .= "<h3 style='color:#009900'>Page Path History is installed, so you are protected from any future URL changes.</h3>";
        }
        else{
            $f->value .= "<h3 style='color:#FF6600'>You should install <a href='".wire('config')->urls->admin."module/installConfirm?name=PagePathHistory'>Page Path History</a> (core module) to ensure any changed URLs are automatically redirected.</h3>";
        }
        $f->value .= "<br /><p><strong>Introduction</strong></p><p>With the 'Automatically rename the name field to match the title' option checked, the default behavior is to have the page name always match changes to the page title, but allow the user to manually edit if they want. The options allow you to protect initial differences (changes you may have made as a user with an exempt role), completely disable manual changes, or protect manual name changes from subsequent changes to the title while editing.</p>
        <p>My preferred settings are to set the exempt role as superuser, and check \"Initial Differences Protected\" and \"Prevent Manual Changes\". You may also want to consider unchecking 'Automatically rename the name field to match the title' once your site is live, and checking the 'Prevent Manual Changes' option, with an exception for the superuser role. This ensures links can't be changed by editors.</p>";

        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'renameMatchTitle');
        $f->label = __('Automatically rename the name field to match the title');
        $f->description = __('If checked, any changes to the title will result in the name being changed to match.');
        $f->columnWidth = 50;
        $f->attr('checked', $data['renameMatchTitle'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'renameUnpublishedOnly');
        $f->label = __('Only rename unpublished pages');
        $f->description = __('If checked, the name field will only be renamed to match the title when the page is unpublished.');
        $f->showIf = "renameMatchTitle=1";
        $f->columnWidth = 50;
        $f->attr('checked', $data['renameUnpublishedOnly'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name+id', 'includeExclude');
        $f->label = __('Exclude or Include Specified Templates');
        $f->columnWidth = 33;
        $f->description = __("This setting determines how the Specified Templates or Specified Pages are handled. If nothing is specified in either of those settings, rules will be applied to all templates / pages.");
        $f->addOption('exclude', 'Exclude');
        $f->addOption('include', 'Include');
        if(isset($data['includeExclude'])) $f->value = $data['includeExclude'];
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name+id', 'exemptTemplates'); //exempt is historical name kept for backward compatibility
        $f->label = __('Specified Templates');
        $f->columnWidth = 34;
        $f->description = __("Selected templates are excluded or included from the actions of this module.");
        $f->notes = __("These restrictions only affect editing/renaming existing pages, not when adding new ones.");
        $f->setAsmSelectOption('sortable', false);
        // populate with all available templates
        foreach(wire('templates') as $t) $f->addOption($t->id,$t->name);
        if(isset($data['exemptTemplates'])) $f->value = $data['exemptTemplates'];
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldPageListSelectMultiple');
        $f->attr('name+id', 'exemptPages'); //exempt is historical name kept for backward compatibility
        $f->label = __('Specified Pages');
        $f->columnWidth = 33;
        $f->description = __("Pages that are excluded or included from the actions of this module.");
        if(isset($data['exemptPages'])) $f->value = $data['exemptPages'];
        $wrapper->add($f);

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name+id', 'exemptRoles');
        $f->label = __('Roles exempt from rules below');
        $f->description = __("The selected roles will not be subject to any of the rules below.\nThe name will change automatically with the title (unless the 'Automatically rename the name field to match the title' is unchecked.), but they will be able to manually edit the page name as desired.");
        $f->setAsmSelectOption('sortable', false);
        // populate with all available templates
        foreach(wire('roles') as $r) $f->addOption($r->name);
        if(isset($data['exemptRoles'])) $f->value = $data['exemptRoles'];
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'initialDifference');
        $f->label = __('Initial Differences Protected');
        $f->columnWidth = 33;
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name was already different from the title (evaluated on page edit initial load).');
        $f->attr('checked', $data['initialDifference'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'preventManualChanges');
        $f->label = __('Prevent Manual Changes');
        $f->columnWidth = 34;
        $f->description = __('If checked, it won\'t be possible to manually edit the name.');
        $f->notes = __('If checked, this will disable the "Live Changes Protected" setting since it won\'t be possible to make any manual changes.');
        $f->attr('checked', $data['preventManualChanges'] ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'liveChanges');
        $f->label = __('Live Changes Protected');
        $f->showIf = "preventManualChanges!=1";
        $f->columnWidth = 33;
        $f->description = __('If checked, further changes to the name (to match a changing title) will not happen if the name field was manually changed at any time during the current page edit.');
        $f->attr('checked', $data['liveChanges'] ? 'checked' : '' );
        $wrapper->add($f);

        return $wrapper;
    }

}
